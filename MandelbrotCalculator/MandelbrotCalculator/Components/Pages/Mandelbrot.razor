@page "/"
@using Akka.Actor
@using MandelbrotCalculator.Actors
@inject ActorSystem ActorSystem
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>Mandelbrot Calculator</h3>

<div class="input-grid" disabled="@(ComputationStatus is true)">
    <div>
        <label>Width:</label>
        <input @bind="Width" type="number" />
    </div>
    <div>
        <label>Height:</label>
        <input @bind="Height" type="number" />
    </div>
    <div>
        <label>Max Iterations:</label>
        <input @bind="MaxIterations" type="number" />
    </div>
    <div>
        <label>Number of Workers:</label>
        <input @bind="NumWorkers" type="number" />
    </div>
    <div>
        <label>Zoom:</label>
        <input @bind="Zoom" type="number" step="0.1" />
    </div>
    <div>
        <label>Offset X:</label>
        <input @bind="OffsetX" type="number" step="0.1" />
    </div>
    <div>
        <label>Offset Y:</label>
        <input @bind="OffsetY" type="number" step="0.1" />
    </div>
</div>

<button class="btn btn-primary mt-3 mb-2" @onclick="StartComputation">Start Computation</button>

@switch (ComputationStatus)
{
    case true:
        <p>Computing...</p>
        break;
    case false:
        <p>Done!</p>
        break;
    default:
        break;
}

@if (Pixels != null)
{
    <div>
        <h4>Result:</h4>
        <canvas id="mandelbrotCanvas" width="@Width" height="@Height"></canvas>
    </div>
}

@code {
    private int Width { get; set; } = 800;
    private int Height { get; set; } = 600;
    private int MaxIterations { get; set; } = 1000;
    private int NumWorkers { get; set; } = 4;
    private double Zoom { get; set; } = 1.0;
    private double OffsetX { get; set; } = 0.0;
    private double OffsetY { get; set; } = 0.0;
    private int[]? Pixels;
    private bool? ComputationStatus;

    private async Task StartComputation()
    {
        ComputationStatus = true;
        StateHasChanged();

        var coordinator = ActorSystem.ActorOf(Props.Create(() => new MandelbrotCoordinatorActor()), "coordinator");
        var result = await coordinator.Ask<MandelbrotResult>(new ComputeMandelbrot(Width, Height, MaxIterations, NumWorkers, Zoom, OffsetX, OffsetY));

        Pixels = result.Pixels;
        StateHasChanged();
        await DrawMandelbrot();
        ComputationStatus = false;
    }

    private async Task DrawMandelbrot()
    {
        if (Pixels is not null)
        {
            await JSRuntime.InvokeVoidAsync("drawMandelbrot", "mandelbrotCanvas", Width, Height, Pixels, MaxIterations);
        }
    }
}
