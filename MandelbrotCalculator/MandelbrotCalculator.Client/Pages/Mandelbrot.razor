@page "/"
@inject HttpClient HttpClient

<h3>Mandelbrot Set Calculator</h3>

<div class="input-grid" disabled="@(ComputationStatus is true)">
    <div>
        <label>Width:</label>
        <input @bind="Width" type="number" min="1" />
    </div>
    <div>
        <label>Height:</label>
        <input @bind="Height" type="number" min="1" />
    </div>
    <div>
        <label>Max Iterations:</label>
        <input @bind="MaxIterations" type="number" min="1" />
    </div>
    <div>
        <label>Zoom:</label>
        <input @bind="Zoom" type="number" step="0.01" min="0.01" />
    </div>
    <div>
        <label>Offset X:</label>
        <input @bind="OffsetX" type="number" step="0.01" />
    </div>
    <div>
        <label>Offset Y:</label>
        <input @bind="OffsetY" type="number" step="0.01" />
    </div>
</div>

<button class="btn btn-primary mt-3 mb-2" @onclick="StartComputation" disabled="@(ComputationStatus is true)">Start Computation</button>
<button class="btn btn-secondary btn-sm mt-2" @onclick="DefaultValues" disabled="@(ComputationStatus is true)">Reset input parameters</button>
<button class="btn btn-danger btn-sm mt-2" @onclick="CancelComputation" disabled="@(ComputationStatus is not true)">Cancel computation</button>

@switch (ComputationStatus)
{
    case true:
        <p>Computing...</p>
        break;
    case false:
        <p>Done! Computation Time: @ComputationTime s</p>
        break;
    default:
        break;
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

@if (!string.IsNullOrEmpty(ImageUrl))
{
    <div>
        <h4>Result:</h4>
        <img id="mandelbrotImage" src="@ImageUrl" class="img-fluid" />
    </div>
}

@code {
    private int Width { get; set; } = 1200;
    private int Height { get; set; } = 900;
    private int MaxIterations { get; set; } = 1000;
    private double Zoom { get; set; } = 1.0;
    private double OffsetX { get; set; } = 0.0;
    private double OffsetY { get; set; } = 0.0;
    private string? ImageUrl;
    private bool? ComputationStatus;
    private string? ErrorMessage;
    private double ComputationTime { get; set; }
    private CancellationTokenSource? CancellationTokenSource;

    private async Task StartComputation()
    {
        ComputationStatus = true;
        ErrorMessage = null;
        CancellationTokenSource = new CancellationTokenSource();
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        try
        {
            var response = await HttpClient.GetAsync($"/mandelbrot?width={Width}&height={Height}&maxIterations={MaxIterations}&zoom={Zoom}&offsetX={OffsetX}&offsetY={OffsetY}".Replace(',', '.'), CancellationTokenSource.Token);
            if (response.IsSuccessStatusCode)
            {
                var imageBytes = await response.Content.ReadAsByteArrayAsync();
                ImageUrl = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
            }
            else
            {
                ErrorMessage = "Failed to compute the Mandelbrot set. Please try again.";
            }
        }
        catch (OperationCanceledException)
        {
            ErrorMessage = "Computation was canceled.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            stopwatch.Stop();
            ComputationTime = stopwatch.ElapsedMilliseconds / 1000.0;
            ComputationStatus = false;
            CancellationTokenSource = null;
        }
    }

    private void CancelComputation()
    {
        CancellationTokenSource?.Cancel();
    }

    private void DefaultValues()
    {
        Width = 1200;
        Height = 900;
        MaxIterations = 1000;
        Zoom = 1.0;
        OffsetX = 0.0;
        OffsetY = 0.0;
    }
}
